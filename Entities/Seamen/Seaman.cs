
using Godot;

using Entities.Holds;



namespace Entities.Seamen;



/// <summary>
/// Abstract base class for AbleBody and Officer
/// </summary>
public abstract class Seaman : RegisterableEntity, IMortal, IHoldable
{
    public bool Alive { get; private set; }
    public int Age { get; private set; }
    public int Health  { get; private set; }

    /// <summary>
    /// A Seaman only takes up one spot.
    /// </summary>
    public int Size { get; } = 1;

    public int MaxHealth { get; private set; } = 100;

    private readonly RandomNumberGenerator rng = new();



    /// <summary>
    /// Make a new Seaman.
    /// Most unspecified parameters are randomly generated.
    /// </summary>
    /// <param name="alive">
    /// Does this Seaman start out alive?
    /// true by default.
    /// </param>
    /// <param name="age">
    /// How many years old this Seaman is.
    /// Randomly set between 12 - 45 by default.
    /// </param>
    /// <param name="health">
    /// How much health this Seaman starts with.
    /// Random between 90 - 100 by default.
    /// </param>
    /// <param name="name">
    /// The name of this Seaman.
    /// Randomly generated by default.
    /// </param>
    public Seaman(bool alive = true, int? age = null, int? health = null, string name = null)
    {
        Alive = alive;

        Name = name ?? SeamenNames.GetName();

        Age = age ?? rng.RandiRange(12, 45);
        
        Health = health ?? rng.RandiRange(90, 100);
    }



    /// <summary>
    /// Deducts health from the Seaman.
    /// They die if baseAmount is greater than Health and Health is set to 0.
    /// </summary>
    /// <param name="baseAmount">
    /// This is directly deducted from Health.
    /// </param>
    public void Damage(int baseAmount)
    {
        Health -= baseAmount;

        if (Health <= 0)
        {
            Health = 0;
            Die();
        }
    }



    /// <summary>
    /// Adds health to the Seaman.
    /// If health goes above MaxHealth, it is set to MaxHealth.
    /// </summary>
    /// <param name="baseAmount">
    /// This is directly added to Health.
    /// </param>
    public void Heal(int baseAmount)
    {
        if (!Alive) return;

        Health += baseAmount;

        if (Health > MaxHealth)
            Health = MaxHealth;
    }



    /// <summary>
    /// Kills the Seaman.
    /// Sets Alive to false.
    /// TODO: Does this need to invoke an event?
    /// </summary>
    public void Die()
    {
        Alive = false;
    }



    /// <summary>
    /// Seaman represented as a string.
    /// </summary>
    /// <returns>
    /// A string containing the Seaman's name, age, and whether they are alive.
    /// </returns>
    public override string ToString()
    {
        return Name + ", aged " + Age + ", is " + (Alive ? "Alive" : "Dead");
    }
}
