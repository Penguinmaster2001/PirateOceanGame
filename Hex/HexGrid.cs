using Godot;
using System.Collections.Generic;



/*
 * This manages the HexMap
 * It displays hexes generated by the map
 * Eventually it will hide hexes out of range
 * 
 * It also manages clicking on the hexes
 */
public partial class HexGrid : Node3D
{
	private float size_ratio = Mathf.Cos(Mathf.Pi / 6.0f);
	private PackedScene hex_tile = GD.Load<PackedScene>("res://Hex/HexTile.tscn");

	[Export(PropertyHint.Range, "1, 500")]
	private int grid_size;


	private List<Material> hex_materials = new();


	public HexMap hex_map;



	[Signal]
	public delegate void HexSelectedEventHandler(Hex hex);



	public override void _Ready()
	{
		List<string> material_paths = HexTypes.get_type_material_paths();

		foreach (string path in material_paths)
			hex_materials.Add(GD.Load<Material>(path));


		hex_map = new(HexContainer.MapShape.triangle, grid_size);

		// HexMap.seed_type(20, "super_deep_water");
		// HexMap.seed_type(4, "mountain");

		display_map(hex_map.get_collapsed_hexes());

		Connect(SignalName.HexSelected,
			new Callable(GetNode("/root/Main/FleetController"),
			nameof(FleetController.on_hex_selection)));

		Connect(SignalName.HexSelected,
			new Callable(GetNode("/root/Main/GameUI/PortManager"),
			nameof(PortManager.on_hex_selection)));
	}



	public override void _Process(double delta)
	{
		if (hex_map.collapsed_all_hexes()) return;

		ulong start_ms = Time.GetTicksMsec();
		while (Time.GetTicksMsec() - start_ms < 10)
			display_hex(hex_map.collapse_next_hex());
	}



	private void display_map(List<WfcHex> hexes)
	{
		foreach (Hex hex in hexes)
			display_hex(hex);
	}
		


	private void display_hex(Hex hex)
	{
		if (hex == null) return;

		Vector3 hex_coords = hex.get_world_coords();

		Node3D display_hex = hex_tile.Instantiate<Node3D>();

		AddChild(display_hex);
		display_hex.Translate(hex_coords);
		
		MeshInstance3D hex_mesh = display_hex.GetChild<MeshInstance3D>(0);
		hex_mesh.MaterialOverride = hex_materials[hex.get_terrain_type()];
	}



	private void select_hex(Hex hex)
	{
		EmitSignal(SignalName.HexSelected, hex);
	}
	


    public override void _UnhandledInput(InputEvent @event)
    {
		if (@event is InputEventMouseButton eventMouseButton
			&& eventMouseButton.IsPressed()
			&& eventMouseButton.ButtonIndex == MouseButton.Left)
		{
			Camera3D camera = GetViewport().GetCamera3D();

			Vector3 origin = camera.ProjectRayOrigin(eventMouseButton.Position);
			Vector3 direction = camera.ProjectRayNormal(eventMouseButton.Position);

			Vector3 intersection = origin - (direction * origin.Y / direction.Y);

			Hex selected_hex = hex_map.get_hex_at_world_coords(intersection.X, intersection.Z);
			select_hex(selected_hex);
		}
    }
}
